package test;

import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
final class DaggerSimpleComponent {
  private DaggerSimpleComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static SimpleComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    public SimpleComponent build() {
      return new SimpleComponentImpl();
    }
  }

  private static final class SimpleComponentImpl implements SimpleComponent {
    private final SimpleComponentImpl simpleComponentImpl = this;

    private Provider<ScopedType> scopedTypeProvider;

    private Provider<DependsOnScoped> dependsOnScopedProvider;

    private SimpleComponentImpl() {

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.scopedTypeProvider = DoubleCheck.provider(ScopedType_Factory.create());
      this.dependsOnScopedProvider = DependsOnScoped_Factory.create(scopedTypeProvider);
    }

    @Override
    public NeedsProvider needsProvider() {
      return new NeedsProvider(dependsOnScopedProvider);
    }
  }
}

