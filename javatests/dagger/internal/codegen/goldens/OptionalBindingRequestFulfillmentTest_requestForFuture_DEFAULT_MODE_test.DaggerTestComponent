package test;

import com.google.common.base.Optional;
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;
import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import dagger.producers.internal.CancellationListener;
import javax.annotation.processing.Generated;
import other.DefinitelyNot;
import other.Maybe;
import other.Maybe_MaybeModule_ProvideMaybeFactory;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
final class DaggerTestComponent {
  private DaggerTestComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  static final class Builder {
    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder maybeModule(Maybe.MaybeModule maybeModule) {
      Preconditions.checkNotNull(maybeModule);
      return this;
    }

    public TestComponent build() {
      return new TestComponentImpl();
    }
  }

  private static final class TestComponentImpl implements TestComponent, CancellationListener {
    private final TestComponentImpl testComponentImpl = this;

    private TestComponentImpl() {


    }

    @Override
    public ListenableFuture<Optional<Maybe>> maybe() {
      return Futures.immediateFuture(Optional.of(Maybe_MaybeModule_ProvideMaybeFactory.provideMaybe()));
    }

    @Override
    public ListenableFuture<Optional<DefinitelyNot>> definitelyNot() {
      return Futures.immediateFuture(Optional.absent());
    }

    @Override
    public void onProducerFutureCancelled(boolean mayInterruptIfRunning) {


    }
  }
}

